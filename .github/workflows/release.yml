name: Release

# This workflow is responsible for creating and publishing new releases.
# It runs in two distinct stages, triggered by different events:
#
# 1. Tagging: When a commit is pushed to `main`, the `tag` job runs.
#    It uses `go-semantic-release` to determine the next version number,
#    creates a corresponding Git tag (e.g., v1.2.3), and pushes it.
#
# 2. Releasing: The push of a new version tag triggers a *new* workflow run.
#    In this second run, only the `goreleaser` job executes, building the
#    binaries and creating a GitHub Release.

on:
  push:
    branches: [main]
    tags:
      - 'v*'

jobs:
  tag:
    # This job only runs on pushes to the main branch.
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install go-semantic-release
        run: |
          go install github.com/go-semantic-release/semantic-release/cmd/semantic-release@v1.20.1
          echo "${HOME}/go/bin" >> $GITHUB_PATH

      - name: Run go-semantic-release (tag + release)
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release || test $? -eq 65  # prevent fail if no release needed

  goreleaser:
    # This job only runs when a version tag (e.g., v1.2.3) is pushed.
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
