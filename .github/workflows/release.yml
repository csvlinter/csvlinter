name: Release

# This workflow is responsible for creating and publishing new releases.
# It runs in two distinct stages, triggered by different events:
#
# 1. Tagging: When a commit is pushed to `main`, the `tag` job runs.
#    It uses `go-semantic-release` to determine the next version number,
#    creates a corresponding Git tag (e.g., v1.2.3), and pushes it.
#
# 2. Releasing: The push of a new version tag triggers a *new* workflow run.
#    In this second run, only the `goreleaser` job executes, building the
#    binaries and creating a GitHub Release.

on:
  push:
    branches: [main]

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
      should_release: ${{ steps.release.outputs.version != '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Evaluate next release version
        id: release
        uses: Sujimoshi/semantic-release-action@v1.8.0
        with:
          branches: |
            main
          tagFormat: v${version}
          plugins: >-
            [["@semantic-release/commit-analyzer", {
              "preset": "conventionalcommits",
              "releaseRules": [
                { "type": "feat",     "release": "minor" },
                { "type": "fix",      "release": "patch" },
                { "type": "docs",     "release": "patch" },
                { "type": "ci",       "release": "patch" },
                { "type": "chore",    "release": "patch" },
                { "type": "refactor", "release": "patch" },
                { "type": "test",     "release": "patch" },
                { "type": "perf",     "release": "patch" },
                { "type": "style",    "release": "patch" },
                { "scope": "no-release", "release": false }
              ]
            }], "@semantic-release/release-notes-generator"]


  release:
    needs: calculate-version
    if: needs.calculate-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Create Git Tag
        run: |
          git tag "v${{ needs.calculate-version.outputs.version }}"
          git push origin "v${{ needs.calculate-version.outputs.version }}"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          # The 'release' command will pick up the latest tag automatically
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
